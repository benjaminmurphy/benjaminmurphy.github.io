---
layout: post
title: The Possibilities of Scratch
spoiler: In October of last year, I began teaching Scratch to a small group of homeschooled students. Over the course of two and a half months, they learned about every block in Scratch, from the opening "Move 10 Steps" to variables, operators, sensing and more. Often because of my prompting, students made some pretty cool projects. Tomorrow, after a three week winter break, CoderDojo starts again, and planning it is getting increasingly difficult.
---

<div class="title-div">
    <p class="title-p">The Possibilities of Scratch</p>
    <p class="date-p">January 7, 2014</p>
</div>

<div class="content-div">In October of last year, I began teaching Scratch to a small group of homeschooled students. Over the course of two and a half months, they learned about every block in Scratch, from the opening "Move 10 Steps" to variables, operators, sensing and more. Often because of my prompting, students made some pretty cool projects. Tomorrow, after a three week winter break, CoderDojo starts again, and planning it is getting increasingly difficult.

Scratch is a fantastic programming language, and a lot is possible with it. Even though the number of available blocks is seemingly small, you can combine them in a myriad of ways to create programs that might take days to code in a language such as Python or Java. I used Scratch for four years or so, constantly creating ever more complex programs. However, with CoderDojo, the students aren't coming up with new ideas. Although they may know every block, they haven't even made a dent in the capabilities of Scratch, nor have they developed the algorithmic and logical thinking skills necessary for scripting languages that Scratch is designed to promote. In fact, some students have begun asking me about other programming languages, thinking they've exhausted Scratch in three months.

I'm caught in a tricky situation. I don't want to stop students from trying out Codecademy, Khan Academy or Udacity, which are within their grasp. However, at the same time, I can't teach three programming languages in the same room, not by myself.

I compromised. I decided to spend a large portion of time on thinking skills. As a programmer, I can attest to the fact that knowing how to code is only half the battle. You have to be able to break down a problem, visualize it in code, and figure out how to write it in your language of choice. We'll begin tomorrow by working on logic puzzles like Perplexors, along with some of my own creation.

After that, we'll kick off a group project. Since students don't yet see how powerful Scratch is and the diversity of projects you can create, I'll propose challenges for the group to work on. Tomorrow, we'll be working on a drawing challenge using the Pen menu. Advanced students will be constructing a path through a maze using turn and move blocks, while beginners will be constructing polygons and other shapes. In addition to being a great group project, this topic also involves quite a bit of math in terms of lines and angles. Now, all I have to do is hope it goes well.</div>